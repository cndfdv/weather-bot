from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup
import requests
from deep_translator import GoogleTranslator
import datetime
from statistics import mean
import asyncio





bot = Bot(token='6231023524:AAHzyvFj6XAXxtKhwUjJdDNVY-F6In2IKd4', parse_mode="HTML")
dp = Dispatcher(bot)


forecast_now = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å–µ–π—á–∞—Å')
clothes = types.KeyboardButton('–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–¥–µ—Ç—å')
forecast_5days = types.KeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π')
forecast_day = types.KeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å')
forecast_every_day = types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –¥–µ–Ω—å')
not_forecast_every_day = types.KeyboardButton('–û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –¥–µ–Ω—å')

markup = ReplyKeyboardMarkup().add(forecast_now).add(clothes).add(forecast_5days).add(forecast_day).add(forecast_every_day).add(not_forecast_every_day)


file1 = open('–¥–Ω–∏ –≤ –≥–æ–¥—É.txt', 'r', encoding='utf-8')
all_days = [str(i).strip() for i in file1]  
own_city = 0
file2 = open('–≥–æ—Ä–æ–¥–∞.txt', 'r', encoding='utf-8')
CITY = [str(i).strip() for i in file2]   
file3 = open('–≤—Ä–µ–º—è.txt', 'r', encoding='utf-8')
all_time = [str(i).strip() for i in file3]   
month = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
nums = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    global user_id
    user_id = message.from_user.id
    if message.from_user.first_name =='Elisey' and message.from_user.last_name == 'Badanin':
        mess = '–≥–∞–Ω–≥ –∏–ª–∏ –±–∞–Ω—å–≥ –ª–µ–π–º, –∏–ª–∏ —Ö–æ–ª–¥ –æ–Ω, —á–µ —Ä–µ—à–∏–ª –ø–æ–≥–æ–¥—É —É–∑–Ω–∞—Ç—å —á—Ç–æ–±—ã —Ç—è–≥–∏ –Ω–µ –ø–∞—á–∫–∞—Ç—å?'
    elif message.from_user.first_name =='—Å–æ–Ω—è' and message.from_user.last_name == None:
        mess = '–ø—Ä–∏–≤–µ—Ç, –ª—é–±–æ–≤—å –º–æ—è'
    else:
        mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}üëã, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø–æ–¥—Å–∫–∞–∂–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏ –≤–æ —á—Ç–æ –º–æ–∂–Ω–æ –æ–¥–µ—Ç—å—Å—è. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥'
    await message.answer(mess)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.answer("–í–æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ", reply_markup=markup)


async def send_time_func(user_id):
    today1 = []
    n = []
    data_today1 = datetime.date.today()
    forecast_every_day = f'–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {str(datetime.date.today())[5:10]}\n'
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                            params={'id': city_id, 'units': 'metric', 'lang': 'ru', 'APPID': appid})
        data = res.json()
        for i in data['list']:
            today1 += i['dt_txt'], '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']
    except Exception as e: 
        await bot.send_message(user_id, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        pass
    for i in range(0, len(today1), 3):
        if i != len(today1) - 2:
            n.append(today1[i:i+3])
    for i in range(len(n) - 1):
        if n[i][0][:10] == str(data_today1):
            forecast_every_day += str(n[i][0]) + '\n' + str(n[i][1]) + ' ' + str(n[i][2]) + '\n'
            if str(n[i][0][8:10]) != str(n[i+1][0][8:10]):
                forecast_every_day += '\n'
    await bot.send_message(user_id, forecast_every_day)
    clothes1 = ''
    sr_temp1 = []
    osadki1 = ''
    data_today2  = datetime.date.today()
    today3 = []
    y = []
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                            params={'id': city_id, 'units': 'metric', 'lang': 'ru', 'APPID': appid})
        data = res.json()
        for i in data['list']:
            today3 += i['dt_txt'], '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']
    except Exception as e: 
        await bot.send_message(user_id, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        pass
    for i in range(0, len(today3), 3):
        if i != len(today3) - 2:
            y.append(today3[i:i+3])
    for i in range(len(y) - 1):
        if y[i][0][:10] == str(data_today2) and 7 <= int(y[i][0][11:13]) <= 22:
            sr_temp1.append(int(y[i][1]))
            osadki1 += str(str(y[i][2]))
    sred1 = round(mean(sr_temp1))
    if sred1 >= 25:
        clothes1 += f'—Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å –∂–∞—Ä–∫–æ - {sred1}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à–æ—Ä—Ç—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏–ª–∏ —à–ª–µ–ø–∞–Ω—Ü—ã, –∏ —Ñ—É—Ç–±–æ–ª–∫—É \n'
        if osadki1.count('–¥–æ–∂–¥—å') != 0:
            clothes1 += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif 15 <= sred1 < 25:
        clothes1 += f'—Å–µ–≥–æ–¥–Ω—è –¥–æ–≤–æ–ª—å–Ω–æ –∂–∞—Ä–∫–æ - {sred1}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã –∏–ª–∏ —à–æ—Ä—Ç—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏–∏ –∏  —Ñ—É—Ç–±–æ–ª–∫—É —Å –∫–æ—Ñ—Ç–æ–π/–≤–µ—Ç—Ä–æ–≤–∫–æ–π \n'
        if osadki1.count('–¥–æ–∂–¥—å') != 0:
               clothes1 += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif 10 <= sred1 < 15:
        clothes1 += f'—Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ - {sred1}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ –∫–æ—Ñ—Ç—É —Å –∫—É—Ä—Ç–∫–æ–π/–≤–µ—Ç—Ä–æ–≤–∫–æ–π \n'
        if osadki1.count('–¥–æ–∂–¥—å') != 0:
            clothes1 += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif 0 <= sred1 < 10:
        clothes1 += f'—Å–µ–≥–æ–¥–Ω—è –¥–æ–≤–æ–ª—å–Ω–æ —Ö–æ–ª–æ–¥–Ω–æ - {sred1}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ –∫–æ—Ñ—Ç—É —Å –∫—É—Ä—Ç–∫–æ–π \n'
        if osadki1.count('–¥–æ–∂–¥—å') != 0:
            clothes1 += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif -10 <= sred1 < 0:
        clothes1 += f'—Å–µ–≥–æ–¥–Ω—è —Ö–æ–ª–æ–¥–Ω–æ - {sred1}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã, —Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏, –∫–æ—Ñ—Ç—É —Å –ø—É—Ö–æ–≤–∏–∫–æ–º –∏ —à–∞–ø–∫—É —Å —à–∞—Ä—Ñ–æ–º'
    elif sred1 < -10:
        clothes1 += f'—Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ - {sred1}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —à—Ç–∞–Ω—ã, —Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏, –∫–æ—Ñ—Ç—É —Å –ø—É—Ö–æ–≤–∏–∫–æ–º –∏ —à–∞–ø–∫—É —Å —à–∞—Ä—Ñ–æ–º'
    await bot.send_message(user_id, clothes1)


@dp.message_handler(text=CITY)
async def city(message: types.Message):
    global s_city
    global city_id
    global id
    global appid
    s_city = (GoogleTranslator(source='ru', target='en').translate(message.text)).capitalize()
    city_id = 0
    appid = "ebb7f668458b6491cb6fac9156aa38e6"
    id = message.chat.id
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/find", params={'q': s_city, 'type': 'like', 'units': 'metric', 'APPID': appid})
        data = res.json()
        cities = ["{} ({})".format(d['name'], d['sys']['country'])
                  for d in data['list']]
        city_id = data['list'][0]['id']
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ ü†ñ/helpü†î')
    except Exception as e:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞')
        pass

@dp.message_handler(text="–£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å–µ–π—á–∞—Å")
async def forecast_now(message: types.Message):
    global temper
    global conditions
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/weather",
                            params={'id': city_id, 'units': 'metric', 'lang': 'ru', 'APPID': appid})
        data = res.json()
        conditions = data['weather'][0]['description']
        temper = data['main']['temp']
    except Exception as e:
        await message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        pass
    await message.answer(f'–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å –≤ –í–∞—à–µ–º –≥–æ—Ä–æ–¥–µ:\n —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {round(int(temper))}¬∞\n –ø–æ–≥–æ–¥–∞ - {conditions}\n')


@dp.message_handler(text="–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–¥–µ—Ç—å")
async def what_put_on(message: types.Message):
    clothes = ''
    sr_temp = []
    osadki = ''
    data_today  = datetime.date.today()
    today2 = []
    x = []
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                            params={'id': city_id, 'units': 'metric', 'lang': 'ru', 'APPID': appid})
        data = res.json()
        for i in data['list']:
            today2 += i['dt_txt'], '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']
    except Exception as e: 
        await message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        pass
    for i in range(0, len(today2), 3):
        if i != len(today2) - 2:
            x.append(today2[i:i+3])
    for i in range(len(x) - 1):
        if x[i][0][:10] == str(data_today) and 7 <= int(x[i][0][11:13]) <= 22:
            sr_temp.append(int(x[i][1]))
            osadki += str(str(x[i][2]))
    sred = round(mean(sr_temp))
    if sred >= 25:
        clothes += f'—Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å –∂–∞—Ä–∫–æ - {sred}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à–æ—Ä—Ç—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏–ª–∏ —à–ª–µ–ø–∞–Ω—Ü—ã, –∏ —Ñ—É—Ç–±–æ–ª–∫—É \n'
        if osadki.count('–¥–æ–∂–¥—å') != 0:
            clothes += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif 15 <= sred < 25:
        clothes += f'—Å–µ–≥–æ–¥–Ω—è –¥–æ–≤–æ–ª—å–Ω–æ –∂–∞—Ä–∫–æ - {sred}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã –∏–ª–∏ —à–æ—Ä—Ç—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏–∏ –∏  —Ñ—É—Ç–±–æ–ª–∫—É —Å –∫–æ—Ñ—Ç–æ–π/–≤–µ—Ç—Ä–æ–≤–∫–æ–π \n'
        if osadki.count('–¥–æ–∂–¥—å') != 0:
            clothes += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif 10 <= sred < 15:
        clothes += f'—Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ - {sred}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ –∫–æ—Ñ—Ç—É —Å –∫—É—Ä—Ç–∫–æ–π/–≤–µ—Ç—Ä–æ–≤–∫–æ–π \n'
        if osadki.count('–¥–æ–∂–¥—å') != 0:
            clothes += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif 0 <= sred < 10:
        clothes += f'—Å–µ–≥–æ–¥–Ω—è –¥–æ–≤–æ–ª—å–Ω–æ —Ö–æ–ª–æ–¥–Ω–æ - {sred}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ –∫–æ—Ñ—Ç—É —Å –∫—É—Ä—Ç–∫–æ–π \n'
        if osadki.count('–¥–æ–∂–¥—å') != 0:
            clothes += '–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –¥–æ–∂–¥—å, –ø–æ—ç—Ç–æ–º—É —Å–æ–≤–µ—Ç—É—é –≤–∑—è—Ç—å –∑–æ–Ω—Ç–∏–∫' 
    elif -10 <= sred < 0:
        clothes += f'—Å–µ–≥–æ–¥–Ω—è —Ö–æ–ª–æ–¥–Ω–æ - {sred}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à—Ç–∞–Ω—ã, —Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏, –∫–æ—Ñ—Ç—É —Å –ø—É—Ö–æ–≤–∏–∫–æ–º –∏ —à–∞–ø–∫—É —Å —à–∞—Ä—Ñ–æ–º'
    elif sred < -10:
        clothes += f'—Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ - {sred}¬∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —à—Ç–∞–Ω—ã, —Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏, –∫–æ—Ñ—Ç—É —Å –ø—É—Ö–æ–≤–∏–∫–æ–º –∏ —à–∞–ø–∫—É —Å —à–∞—Ä—Ñ–æ–º'
    await message.answer(clothes)


@dp.message_handler(text="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π")
async def forecast_five_days(message: types.Message):
    on5days = []
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                            params={'id': city_id, 'units': 'metric', 'lang': 'ru', 'APPID': appid})
        data = res.json()
        for i in data['list']:
            on5days += i['dt_txt'], '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']
    except Exception as e: 
        await message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        pass
    m = []
    for i in range(0, len(on5days), 3):
        if i != len(on5days) - 2:
            m.append(on5days[i:i+3])
    forecast5days = '–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π\n'
    for i in range(len(m) - 1):
        forecast5days += str(m[i][0]) + '\n' + str(m[i][1]) + ' ' + str(m[i][2]) + '\n'
        if str(m[i][0][8:10]) != str(m[i+1][0][8:10]):
            forecast5days += '\n'
    forecast5days += str(m[-1][0]) + '\n' + str(m[-1][1]) + ' ' + str(m[-1][2]) + '\n'
    await message.answer(forecast5days)


@dp.message_handler(text="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å")
async def forecast_need_day(message: types.Message):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É')


@dp.message_handler(text=all_days)
async def forecast_need_day_weather(message: types.Message):
    date = f'{nums[month.index(message.text.split()[1])]}-{message.text.split()[0]}'
    today = []
    l = []
    forecasttoday = f'–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {message.text}\n'
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                            params={'id': city_id, 'units': 'metric', 'lang': 'ru', 'APPID': appid})
        data = res.json()
        for i in data['list']:
            today += i['dt_txt'], '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']
    except Exception as e: 
        await message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        pass
    for i in range(0, len(today), 3):
        if i != len(today) - 2:
            l.append(today[i:i+3])
    for i in range(len(l) - 1):
        if l[i][0][5:10] == date:
            forecasttoday += str(l[i][0]) + '\n' + str(l[i][1]) + ' ' + str(l[i][2]) + '\n'
            if str(l[i][0][8:10]) != str(l[i+1][0][8:10]):
                forecasttoday += '\n'
    await message.answer(forecasttoday)


@dp.message_handler(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –¥–µ–Ω—å")
async def time_everyday_forecast(message: types.Message):
    await message.answer('–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –í —ç—Ç–æ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–µ–Ω—å')



@dp.message_handler(text=all_time)
async def creaate_send_time(message: types.Message):
    global send_time
    send_time = message.text
    user_id = message.from_user.id
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –≤—ã–±–æ—Ä—É –æ–¥–µ–∂–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {send_time}')

    # Schedule the notification
    send_time = datetime.datetime.strptime(send_time, '%H:%M')
    now = datetime.datetime.now()
    send_time = datetime.datetime.combine(now.date(), send_time.time())
    delay = (send_time - now).total_seconds()

    asyncio.get_event_loop().call_later(delay, lambda: asyncio.create_task(send_time_func(user_id)))


@dp.message_handler(text="–û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –¥–µ–Ω—å")
async def creaate_send_time(message: types.Message):
    send_time = 0
    await message.answer(f'–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')


executor.start_polling(dp)